plugins {
    id 'java'
    id 'io.quarkus'
    id 'jacoco'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-arc'
    implementation "org.projectlombok:lombok:${lombokVersion}"

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation "io.quarkus:quarkus-jacoco"
}

group 'it.pagopa.swclient.mil'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jacoco {
    toolVersion = "${jacocoToolVersion}"
}

// runs jacocoTestCoverageVerification before complete check
check {
    dependsOn jacocoTestCoverageVerification
}

def jacocoQuarkusPath = project.layout.buildDirectory.file("jacoco-quarkus.exec")

// allows to collect jacoco coverage on non-quarkus test
// refers to https://quarkus.io/guides/tests-with-coverage#coverage-for-tests-not-using-quarkustest
test {
    finalizedBy jacocoTestReport
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = jacocoQuarkusPath.map { it.asFile }.getOrNull()
    }
}

// configure line coverage verification
// refers to https://quarkus.io/guides/tests-with-coverage#setting-coverage-thresholds
jacocoTestCoverageVerification {
    executionData.setFrom(jacocoQuarkusPath.map { (it.asFile as File).getPath() }.get())
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }
        }
        rule {
            element = 'METHOD'
            limit {
                counter = 'COMPLEXITY'
                value = 'TOTALCOUNT'
                maximum = 15
            }
        }
    }
}

// refers to https://docs.gradle.org/8.5/userguide/dependency_locking.html
dependencyLocking {
    lockMode = LockMode.STRICT
    lockAllConfigurations()
}